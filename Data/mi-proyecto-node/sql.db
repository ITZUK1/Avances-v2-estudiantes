se actualizo la DATABASE

CREATE DATABASE ColegioDB;
USE ColegioDB;

-- Creación de la tabla Profesor
CREATE TABLE Profesor (
    id INT AUTO_INCREMENT PRIMARY KEY,
    documento_identidad VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    telefono VARCHAR(15),
    status ENUM('activo', 'inactivo') DEFAULT 'activo'
);

-- Creación de la tabla Curso
CREATE TABLE Curso (
    id INT AUTO_INCREMENT PRIMARY KEY,
    descripcion VARCHAR(255) NOT NULL UNIQUE
);

-- Creación de la tabla Estudiante
CREATE TABLE Estudiante (
    id INT AUTO_INCREMENT PRIMARY KEY,
    documento_identidad VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    telefono VARCHAR(15),
    status ENUM('activo', 'inactivo') DEFAULT 'activo',
    curso_id INT,  -- Relación con Curso
    avatar_url VARCHAR(255),
    FOREIGN KEY (curso_id) REFERENCES Curso(id) ON DELETE SET NULL,
    UNIQUE (documento_identidad, curso_id) -- Evita duplicados en un curso
);

-- Creación de la tabla Materia
CREATE TABLE Materia (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    semestre VARCHAR(10) NOT NULL,
    fecha_inicio DATE NOT NULL,
    status ENUM('activo', 'inactivo') DEFAULT 'activo',
    profesor_id INT,  -- Relación con Profesor
    curso_id INT,  -- Relación con Curso
    FOREIGN KEY (profesor_id) REFERENCES Profesor(id) ON DELETE SET NULL,
    FOREIGN KEY (curso_id) REFERENCES Curso(id) ON DELETE SET NULL,
    UNIQUE (nombre, curso_id, semestre) -- Evita duplicados por curso y semestre
);

-- Creación de la tabla Inasistencia
CREATE TABLE Inasistencia (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,  -- Fecha de la inasistencia
    estudiante_id INT NOT NULL,  -- Relación con Estudiante
    materia_id INT NOT NULL,  -- Relación con Materia
    motivo TEXT,  -- Opcional: Descripción del motivo de la inasistencia
    FOREIGN KEY (estudiante_id) REFERENCES Estudiante(id) ON DELETE CASCADE,
    FOREIGN KEY (materia_id) REFERENCES Materia(id) ON DELETE CASCADE
);

-- Índices para optimizar consultas frecuentes
CREATE INDEX idx_estudiante_curso ON Estudiante(curso_id);
CREATE INDEX idx_materia_profesor ON Materia(profesor_id);
CREATE INDEX idx_materia_curso ON Materia(curso_id);

-- Cambiamos el delimitador para los triggers
DELIMITER $$

-- Validaciones lógicas:
-- Asegurarse de que la fecha de nacimiento no sea futura
CREATE TRIGGER trg_validar_fecha_nacimiento BEFORE INSERT ON Estudiante
FOR EACH ROW
BEGIN
    IF NEW.fecha_nacimiento > CURDATE() THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La fecha de nacimiento no puede ser futura.';
    END IF;
END;
$$

-- Validar que un profesor no pueda estar asignado a la misma materia en el mismo semestre más de una vez
CREATE TRIGGER trg_validar_profesor_materia BEFORE INSERT ON Materia
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1 FROM Materia
        WHERE profesor_id = NEW.profesor_id
          AND curso_id = NEW.curso_id
          AND semestre = NEW.semestre
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El profesor ya está asignado a esta materia en el mismo curso y semestre.';
    END IF;
END;
$$

-- Regresar el delimitador original
DELIMITER ;

















////////////////////////////server/////////////////

-- Creación de la tabla Profesor
CREATE TABLE Profesor (
    id INT IDENTITY(1,1) PRIMARY KEY,
    documento_identidad VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    telefono VARCHAR(15),
    status NVARCHAR(10) DEFAULT 'activo' CHECK (status IN ('activo', 'inactivo'))
);
GO

-- Creación de la tabla Curso
CREATE TABLE Curso (
    id INT IDENTITY(1,1) PRIMARY KEY,
    descripcion VARCHAR(255) NOT NULL UNIQUE
);
GO

-- Creación de la tabla Estudiante
CREATE TABLE Estudiante (
    id INT IDENTITY(1,1) PRIMARY KEY,
    documento_identidad VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    telefono VARCHAR(15),
    status NVARCHAR(10) DEFAULT 'activo' CHECK (status IN ('activo', 'inactivo')),
    curso_id INT NULL, -- Relación con Curso
    avatar_url VARCHAR(255),
    FOREIGN KEY (curso_id) REFERENCES Curso(id) ON DELETE SET NULL
);
GO

-- Crear índice único para evitar duplicados en documento_identidad y curso_id
CREATE UNIQUE INDEX UQ_documento_curso ON Estudiante (documento_identidad, curso_id);
GO

-- Creación de la tabla Materia
CREATE TABLE Materia (
    id INT IDENTITY(1,1) PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT NULL,
    semestre NVARCHAR(10) NOT NULL,
    fecha_inicio DATE NOT NULL,
    status NVARCHAR(10) DEFAULT 'activo' CHECK (status IN ('activo', 'inactivo')),
    profesor_id INT NULL, -- Relación con Profesor
    curso_id INT NULL, -- Relación con Curso
    FOREIGN KEY (profesor_id) REFERENCES Profesor(id) ON DELETE SET NULL,
    FOREIGN KEY (curso_id) REFERENCES Curso(id) ON DELETE SET NULL
);
GO

-- Crear índice único para evitar duplicados por curso y semestre
CREATE UNIQUE INDEX UQ_materia_curso_semestre ON Materia (nombre, curso_id, semestre);
GO

-- Creación de la tabla Inasistencia
CREATE TABLE Inasistencia (
    id INT IDENTITY(1,1) PRIMARY KEY,
    fecha DATE NOT NULL, -- Fecha de la inasistencia
    estudiante_id INT NOT NULL, -- Relación con Estudiante
    materia_id INT NOT NULL, -- Relación con Materia
    motivo TEXT NULL, -- Motivo opcional
    FOREIGN KEY (estudiante_id) REFERENCES Estudiante(id) ON DELETE CASCADE,
    FOREIGN KEY (materia_id) REFERENCES Materia(id) ON DELETE CASCADE
);
GO


DROP TABLE Inasistencia;
DROP TABLE Materia;
DROP TABLE Estudiante;
DROP TABLE Curso;
DROP TABLE Profesor;

SELECT * FROM Inasistencia;
SELECT * FROM Materia;
SELECT * FROM Estudiante;
SELECT * FROM Curso;
SELECT * FROM Profesor;




